import os
import sqlite3
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = "7947997632:AAGhg9kbOW4lLRt-tOjt9D-wQKg03CcF_TE"
ADMIN_ID = 6393036027
DB = "users.db"

def init_db():
    with sqlite3.connect(DB) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            status TEXT DEFAULT 'unknown',
            reason TEXT,
            views INTEGER DEFAULT 0,
            likes INTEGER DEFAULT 0,
            dislikes INTEGER DEFAULT 0
        )''')
        conn.execute('''CREATE TABLE IF NOT EXISTS votes (
            voter_id INTEGER,
            target TEXT,
            vote INTEGER,
            PRIMARY KEY (voter_id, target)
        )''')
        conn.execute('''CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            reporter_id INTEGER,
            username TEXT,
            reason TEXT
        )''')

def get_user(username):
    with sqlite3.connect(DB) as conn:
        cur = conn.execute("SELECT * FROM users WHERE username=?", (username,))
        return cur.fetchone()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∞–∑—É!\n\n"
        "üìå –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /check @username\n"
        "‚ö†Ô∏è –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∞: /add @username –ø—Ä–∏—á–∏–Ω–∞\n"
        "üì® –ß—Ç–æ–±—ã –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è: /report @username –ø—Ä–∏—á–∏–Ω–∞\n"
        "üîù –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø –≥–∞—Ä–∞–Ω—Ç–æ–≤: /top\n"
        "üíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞: /admin"
    )

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /check @username")
        return
    username = context.args[0].lstrip('@')
    with sqlite3.connect(DB) as conn:
        conn.execute("UPDATE users SET views = views + 1 WHERE username=?", (username,))
        cur = conn.execute("SELECT * FROM users WHERE username=?", (username,))
        row = cur.fetchone()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üëç", callback_data=f"like:{username}"),
         InlineKeyboardButton("üëé", callback_data=f"dislike:{username}")],
        [InlineKeyboardButton("üì® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report:{username}")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ", switch_inline_query_current_chat="/check @")]
    ])
    if row:
        status = row[2]
        message = f"üîé @{username}\n–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {row[4]}\nüëç {row[5]} üëé {row[6]}\n\n"
        if status == "scammer":
            message = "üö´ –ú–û–®–ï–ù–ù–ò–ö ‚ùóÔ∏è\n" + message + "–ò–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≥–∞—Ä–∞–Ω—Ç–∞–º!\nüì§ –í –ß–°!"
            image_path = "images/scammer.jpg"
        elif status == "guarant":
            message = (
                f"üõ° –¢–û–ü –ì–ê–†–ê–ù–¢: @{username}\n"
                f"–¢–æ–ø —Å–¥–µ–ª–∫–∞: 10.000$\n–ö–æ–º–∏—Å—Å–∏—è: 2% / 300 —Ä—É–±\n\n"
                f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º ‚úÖ\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ ‚úî\n"
                f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {row[4]}\nüëç {row[5]} üëé {row[6]}"
            )
            image_path = "images/guarant.jpg"
        else:
            message = "‚ùî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º–µ—á–µ–Ω –≤ –±–∞–∑–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.\n" + \
                      "–ù–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á–µ—Ä–µ–∑ /check\n\n" + message
            image_path = "images/unknown.jpg"
        await update.message.reply_photo(photo=InputFile(image_path), caption=message, reply_markup=keyboard)
    else:
        with sqlite3.connect(DB) as conn:
            conn.execute("INSERT INTO users (username) VALUES (?)", (username,))
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /check")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add @user –ø—Ä–∏—á–∏–Ω–∞")
        return
    username = context.args[0].lstrip('@')
    reason = " ".join(context.args[1:])
    with sqlite3.connect(DB) as conn:
        conn.execute("INSERT OR IGNORE INTO users (username) VALUES (?)", (username,))
        conn.execute("UPDATE users SET status='scammer', reason=? WHERE username=?", (reason, username))
    await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–æ—à–µ–Ω–Ω–∏–∫.")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /report @user –ø—Ä–∏—á–∏–Ω–∞")
        return
    username = context.args[0].lstrip('@')
    reason = " ".join(context.args[1:])
    user_id = update.effective_user.id
    with sqlite3.connect(DB) as conn:
        conn.execute("INSERT INTO reports (reporter_id, username, reason) VALUES (?, ?, ?)", (user_id, username, reason))
    await update.message.reply_text("üì® –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await context.bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç @{update.effective_user.username or user_id} –Ω–∞ @{username}:\n{reason}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, username = query.data.split(':')
    user_id = query.from_user.id
    with sqlite3.connect(DB) as conn:
        if action == "like":
            conn.execute("INSERT OR IGNORE INTO votes (voter_id, target, vote) VALUES (?, ?, 1)", (user_id, username))
            conn.execute("UPDATE users SET likes = likes + 1 WHERE username=?", (username,))
            await query.edit_message_caption(caption="üëç –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω.")
        elif action == "dislike":
            conn.execute("INSERT OR IGNORE INTO votes (voter_id, target, vote) VALUES (?, ?, -1)", (user_id, username))
            conn.execute("UPDATE users SET dislikes = dislikes + 1 WHERE username=?", (username,))
            await query.edit_message_caption(caption="üëé –î–∏–∑–ª–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω.")
        elif action == "report":
            await query.message.reply_text(f"–î–ª—è –∂–∞–ª–æ–±—ã –∏—Å–ø–æ–ª—å–∑—É–π:\n/report @{username} –ø—Ä–∏—á–∏–Ω–∞")

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    with sqlite3.connect(DB) as conn:
        scammers = conn.execute("SELECT username, reason FROM users WHERE status='scammer'").fetchall()
        reports = conn.execute("SELECT username, reason FROM reports").fetchall()
    message = "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
    message += f"–ú–æ—à–µ–Ω–Ω–∏–∫–∏:\n" + "\n".join([f"- @{u} ({r})" for u, r in scammers]) + "\n\n"
    message += f"–ñ–∞–ª–æ–±—ã:\n" + "\n".join([f"- @{u} ({r})" for u, r in reports]) + "\n"
    await update.message.reply_text(message or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
